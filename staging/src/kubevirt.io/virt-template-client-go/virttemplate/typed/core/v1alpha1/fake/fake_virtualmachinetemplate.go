/*
 * This file is part of the KubeVirt project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Copyright The KubeVirt Authors.
 *
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	gentype "k8s.io/client-go/gentype"
	v1alpha1 "kubevirt.io/virt-template-api/core/v1alpha1"
	corev1alpha1 "kubevirt.io/virt-template-client-go/virttemplate/typed/core/v1alpha1"
)

// fakeVirtualMachineTemplates implements VirtualMachineTemplateInterface
type fakeVirtualMachineTemplates struct {
	*gentype.FakeClientWithList[*v1alpha1.VirtualMachineTemplate, *v1alpha1.VirtualMachineTemplateList]
	Fake *FakeTemplateV1alpha1
}

func newFakeVirtualMachineTemplates(fake *FakeTemplateV1alpha1, namespace string) corev1alpha1.VirtualMachineTemplateInterface {
	return &fakeVirtualMachineTemplates{
		gentype.NewFakeClientWithList[*v1alpha1.VirtualMachineTemplate, *v1alpha1.VirtualMachineTemplateList](
			fake.Fake,
			namespace,
			v1alpha1.SchemeGroupVersion.WithResource("virtualmachinetemplates"),
			v1alpha1.SchemeGroupVersion.WithKind("VirtualMachineTemplate"),
			func() *v1alpha1.VirtualMachineTemplate { return &v1alpha1.VirtualMachineTemplate{} },
			func() *v1alpha1.VirtualMachineTemplateList { return &v1alpha1.VirtualMachineTemplateList{} },
			func(dst, src *v1alpha1.VirtualMachineTemplateList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.VirtualMachineTemplateList) []*v1alpha1.VirtualMachineTemplate {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1alpha1.VirtualMachineTemplateList, items []*v1alpha1.VirtualMachineTemplate) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
